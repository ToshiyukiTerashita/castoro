#
# peer.conf - Castoro Peer システム設定ファイル
#

################################################################################
# コメント
#
# シャープ # で始まる行は、コメント行として扱われます。
; セミコロン ; で始まる行も、コメント行として扱われます。

# このサンプルファイル内でセミコロンでコメントアウトされているパラメータは、省略可能です。
# 一方、このサンプルファイル内でコメントアウトされていないパラメータは、必須です。

################################################################################
# ファイル構造
#
# この設定ファイルは、一つのグローバルセクションと、一つ以上のサービスセクションで
# 構成されています。

################################################################################
[global]

################################################################################
# ホスト名
#
# peer_hostname で、このマシンのホスト名を定義します。クライアントはこの
# ホスト名に対してアクセスします。このホスト名はゲートウェイへ送られ、そして、
# ゲートウェイはこのホスト名をクライアントホストへ送ります。
#
# デフォルトのホスト名は、次の方法で決ります。
#  ruby -e 'require "socket"; puts Socket::gethostname.split(".")[0]'
#
# 上記のホスト名でよろしければ、この項目をコメントアウトしたままで構いません。
#
; peer_hostname server100

################################################################################
# マルチキャスト用 NIC の IP アドレス と マルチキャストアドレス (ゲートウェイ)
#
# ピア (cpeerd、 crepd と cmond) はマルチキャスト UDP パケットを Castoro 
# ゲートウェイに向けて送出します。
#
# gateway_comm_ipaddr_multicast で、マルチキャストアドレスを指定します。ピアはゲートウェイに
# 向けて、マルチキャスト UDP パケットをそのマルチキャストアドレスへ送信します。
#
gateway_comm_ipaddr_multicast 239.192.1.1

# このホスト上のネットワークインターフェースカード (NIC) の IP アドレスをここで
# 定義します。マルチキャストパケットは、その NIC 経由で送信されます。
#
# デフォルトの NIC の IP アドレスは、以下の方法で決まります。
#  ruby -e 'require "socket"; puts IPSocket::getaddress(Socket::gethostname)'
#
# もし、上述のアドレスが適切であるなら、以下の二つの項目をそのままコメントアウト
# しておいて構いません。そうでなければ、どちらか一つを割り当てて、アドレスを
# 指定してください。
#
# gateway_comm_ipaddr_network で、NIC が接続されているネットワークアドレスを指定します。
# その NIC の IP アドレスは、自動的に求められます。
#
; gateway_comm_ipaddr_network 192.168.1.0/255.255.255.0
; gateway_comm_ipaddr_network 192.168.1.0/24

# gateway_comm_ipaddr_nic で、NIC の IP アドレスを明示的に指定します。
#
; gateway_comm_ipaddr_nic 192.168.1.100

################################################################################
# マルチキャスト用 NIC の IP アドレス と マルチキャストアドレス (ピア)
#
# Castoro ゲートウェイはマルチキャスト UDP パケットを ピア (cpeerd) に向けて送出します。
#
# peer_comm_ipaddr_multicast で、マルチキャストアドレスを指定します。ゲートウェイはピアに
# 向けて、マルチキャスト UDP パケットをそのマルチキャストアドレスへ送信します。
#
peer_comm_ipaddr_multicast 239.192.1.1

# このホスト上のネットワークインターフェースカード (NIC) の IP アドレスをここで
# 定義します。マルチキャストパケットは、その NIC 経由で受信されます。
#
# デフォルトの NIC の IP アドレスは、以下の方法で決まります。
#  ruby -e 'require "socket"; puts IPSocket::getaddress(Socket::gethostname)'
#
# もし、上述のアドレスが適切であるなら、以下の二つの項目をそのままコメントアウト
# しておいて構いません。そうでなければ、どちらか一つを割り当てて、アドレスを
# 指定してください。
#
# peer_comm_ipaddr_network で、NIC が接続されているネットワークアドレスを指定します。
# その NIC の IP アドレスは、自動的に求められます。
#
; peer_comm_ipaddr_network 192.168.1.0/255.255.255.0
; peer_comm_ipaddr_network 192.168.1.0/24

# peer_comm_ipaddr_nic で、NIC の IP アドレスを明示的に指定します。
#
; peer_comm_ipaddr_nic 192.168.1.100

################################################################################
# ポート番号
#
# gateway_learning_udpport_multicast で、ゲートウェイの UDP ポート番号を指定します。ピア
# (cpeerd と crepd) は、要求をそのポート番号へマルチキャスト経由で送ります。
gateway_learning_udpport_multicast            30109

# peer_comm_tcpport で、ピア (cpeerd) が待ち受ける TCP ポート番号を指定します。
# このポートは、TCP 接続経由でのクライアントホストからの要求用です。
peer_comm_tcpport               30111

# peer_comm_udpport_multicast で、ピア (cpeerd) が結びつける UDP ポート番号を指定します。
# このポートは、UDP 接続経由でのゲートウェイからの要求用です。
peer_comm_udpport_multicast               30112

# gateway_watchdog_udpport_multicast で、ゲートウェイのUDP ポート番号を指定します。ピア 
# (cmond) はワッチドッグ・パケットをマルチキャストでそのポート番号へ送ります。
gateway_watchdog_udpport_multicast           30113

# crepd_transmission_tcpport で、近隣のピア (crepd) のTCP ポート番号を
# 指定します。ピア (crepd) は、レプリケーション・データをそのポート番号へ
# 送ります。また、ピア (crepd) は、近隣のピアからレプリケーション・データを
# 受信するために、そのポート番号で待ち受けます。
crepd_transmission_tcpport  30148

# crepd_registration_udpport で、UDP ポート番号を指定します。ピア (crepd) は
# そのポート番号へ結びつけます。このポートは、ピア上での内部通信に使われます。
# cpeerd は FINALIZE コマンドを処理するとすぐに、新しいバスケットが
# 作成されたことを通知するために、コマンドパケットを crepd へ送ります。
crepd_registration_udpport        30149

# cmond_maintenance_tcpport、cpeerd_maintenance_tcpport、及び crepd_maintenance_tcpport で、
# ピアの各デーモンプロセス (cmond、cpeerd、及び crepd) がそれぞれ待ち受ける
# TCP ポート番号を指定します。各デーモンプロセスはこれらのポート経由で peerctl
# コマンドからの遠隔保守コマンドを受け取ります。加えて、cpeerd と crepd は、
# それらのポート経由で cmond からの内部保守コマンドを受け取ります。
cmond_maintenance_tcpport             30100
cpeerd_maintenance_tcpport            30102
crepd_maintenance_tcpport             30103

# cmond_healthcheck_tcpport、cpeerd_healthcheck_tcpport、 及び、crepd_healthcheck_tcpport で、
# ピアの各デーモンプロセス (cmond、cpeerd、及び crepd) がそれぞれ待ち受ける
# TCP ポート番号を指定します。このホスト上の cmond は、近隣の状態を監視するために、
# 近隣のピア上で動作している別の cmond へ接続を確立します。また、その逆方向もです。
# 加えて、cmond は、このホスト上で動作している cpeerd と crepd の両方の状態を
# 監視するために、それらへ接続を確立します。
cmond_healthcheck_tcpport             30105
cpeerd_healthcheck_tcpport            30107
crepd_healthcheck_tcpport             30108

################################################################################
# cpeerd のワーカー数
#
# これらのパラメーターで、ピア (cpeerd) の内部ワーカー数を指定します。
cpeerd_number_of_udp_command_processor      10
cpeerd_number_of_tcp_command_processor      10
cpeerd_number_of_basket_status_query_db      10
cpeerd_number_of_csm_controller             3
cpeerd_number_of_udp_response_sender        10
cpeerd_number_of_tcp_response_sender        10
cpeerd_number_of_multicast_command_sender    3
cpeerd_number_of_replication_db_client       1

################################################################################
# 頻度
#
# cmond_period_of_watchdog_sender で、ピア (cmond) がワッチドック・パケットをどの程度
# の頻度で送出するかを指定します。単位は秒です。
cmond_period_of_watchdog_sender         4

# cpeerd_period_of_statistics_logger で、どの程度の頻度でピア (cpeerd) で内部統計数値が
# 収集されるかを指定します。単位は秒です。
cpeerd_period_of_statistics_logger         60

################################################################################
# ピアグループ構成
#
# config_group_file で、ピアグループが定義されているファイル名を指定します。
# そのファイル内のホスト名は、ログファイルに現れる論理ホスト名です。
config_group_file         /etc/castoro/storage_groups.json

# config_host_file で、論理ホスト名とそれに対応する物理ホスト名が定義されている
# ファイル名を指定します。そのファイル内の物理ホスト名が、ピア (crepd) が接続を
# 確立しバスケットをレプリケーションする先のホスト名です。
config_host_file          /etc/castoro/storage_hosts.yml

################################################################################
# 実効ユーザーID
#
# effective_user で、実効ユーザーIDを指定します。ピアのデーモンプロセス (cmond、
# cpeerd、及び crepd) は、このユーザーIDで動作します。
# これらのデーモンプロセスが root ユーザーとして起動されると、それらの実効ユーザーID 
# を root からこの実効ユーザーID へ変更します。これらのデーモンプロセスが一般ユーザー
# として起動された場合、ユーザーID を変更しません。
effective_user             castoro

################################################################################
# レプリケーション
#
# crepd_transmission_data_unit_size で、一度に送られる転送データサイズを指定
# します。送られるファイルのサイズがこのサイズよりも大きい場合、ファイルのすべての
# データを転送するために、複数の連続した転送が行われます。単位はバイトです。
crepd_transmission_data_unit_size     1048576

# crepd_number_of_replication_sender で、ピア (crepd) の内部ワーカー数を指定します。
crepd_number_of_replication_sender         3

################################################################################
# Castoro マニピュレーター
#
# manipulator_in_use で、Castoro マニピュレーターを使うかどうか指定します。
manipulator_in_use      yes

# manipulator_socket で、UNIX ソケットファイルを指定します。
# そのソケットファイルは、Castoro マニピュレーターによって作成されます。
# cpeerd と crepd の両方は、このソケットファイルを使って、Castoro マニピュレーター・
# デーモンと会話します。
manipulator_socket         /var/castoro/manipulator.sock

################################################################################
# ストレージ
#
# basket_basedir で、ストレージ領域の基本ディレクトリを指定します。
basket_basedir /expdsk

# 次のパラメーターで、作業ディレクトリのユーザーID、グループID、及び、
# パーミッション・ビットを指定します。
# "basket_basedir/type/baskets/w/..."
dir_w_user   castoro
dir_w_group  castoro
dir_w_perm   0777

# 次のパラメーターで、保管ディレクトリのユーザーID、グループID、及び、
# パーミッション・ビットを指定します。
# "basket_basedir/type/baskets/a/..."
dir_a_user   root
dir_a_group  castoro
dir_a_perm   0555

# 次のパラメーターで、削除されたファイルが保管されるディレクトリのユーザーID、
# グループID、及び、パーミッション・ビットを指定します。
# "basket_basedir/type/offline/deleted/..."
dir_d_user   root
dir_d_group  castoro
dir_d_perm   0555

# 次のパラメーターで、キャンセルされたファイルが保管されるディレクトリの
# ユーザーID、グループID、及び、パーミッション・ビットを指定します。
# "basket_basedir/type/offline/canceled/..."
dir_c_user   root
dir_c_group  castoro
dir_c_perm   0555

################################################################################
[service]

# service_name で、サービス名を指定します。この名前でサービスを区別します。
# 任意な名前が使えます。
service_name service1

# type_id_ranges で、このサービスが使う、タイプIDの値、または、タイプIDの範囲を
# 指定します。カンマで区切って、複数の値と範囲を指定できます。
# 例
#   0,1,2
#   0-999
#   0-999, 2000, 3000-3999
type_id_ranges 0-999

# basket_keyconverter で、バスケットキー変換モジュールの名前を指定します。
# 二つのモジュールが使用できます。
#   Dec40Seq - 10進数、40ビット・コンテンツID、連続したコンテンツID対応
#   Hex64Seq - 16進数、64ビット・コンテンツID、連続したコンテンツID対応
basket_keyconverter Dec40Seq

################################################################################
; [service]

# service_name で、サービス名を指定します。この名前でサービスを区別します。
# 任意な名前が使えます。
; service_name service2

# type_id_ranges で、このサービスが使う、タイプIDの値、または、タイプIDの範囲を
# 指定します。カンマで区切って、複数の値と範囲を指定できます。
# 例
#   0,1,2
#   0-999
#   0-999, 2000, 3000-3999
; type_id_ranges 1000-1999

# basket_keyconverter で、バスケットキー変換モジュールの名前を指定します。
# 二つのモジュールが使用できます。
#   Dec40Seq - 10進数、40ビット・コンテンツID、連続したコンテンツID対応
#   Hex64Seq - 16進数、64ビット・コンテンツID、連続したコンテンツID対応
; basket_keyconverter Hex64Seq

################################################################################
