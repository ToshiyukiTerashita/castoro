#!/usr/bin/env ruby

#
#   Copyright 2010 Ricoh Company, Ltd.
#
#   This file is part of Castoro.
#
#   Castoro is free software: you can redistribute it and/or modify
#   it under the terms of the GNU Lesser General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   Castoro is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU Lesser General Public License for more details.
#
#   You should have received a copy of the GNU Lesser General Public License
#   along with Castoro.  If not, see <http://www.gnu.org/licenses/>.
#

require "fileutils"
require "optparse"
require "pathname"

require "rubygems"
require "castoro-manipulator"

require "castoro-manipulator/scripts/script_runner"

COMMAND_OPTIONS = {
  :start => {
    :verbose => false,
    :daemon => false,
    :pid => "/var/castoro/manipulator.pid",
    :log => "/var/castoro/manipulator.log",
    :conf => "/etc/castoro/manipulator.conf",
    :env => "default",
  },
  :stop => {
    :verbose => false,
    :force => false,
    :pid => "/var/castoro/manipulator.pid",
  },
  :setup => {
    :verbose => false,
    :conf => "/etc/castoro/manipulator.conf",
  },
}

def help
  puts "#{File.basename(__FILE__)} <command>"
  puts
  puts "Available commands:"
  COMMAND_OPTIONS.keys.each { |c| puts "\t#{c}" }
  puts
end

# get command.
command = ARGV.shift.to_s.to_sym
unless COMMAND_OPTIONS.include? command
  help
  exit 1
end

opt = COMMAND_OPTIONS[command].dup

parser = OptionParser.new { |parser|
  parser.program_name = "#{File.basename(__FILE__)} #{command}"

  case command
  when :start
    parser.on('-v', '--verbose', 'verbose') { |v|
      opt[:verbose] = true
    }
    parser.on('-d', '--daemon', 'daemon mode') { |v|
      opt[:daemon] = true
    }
    parser.on('-p PID', '--pid <pidfile>', 'PID file (only for the daemon mode)') { |v|
      if Pathname.new(v).absolute?
        opt[:pid] = Pathname.new(v).to_s
      else
        opt[:pid] = Pathname.new(File.join(Pathname.pwd, v)).to_s
      end
      dir = File.dirname(opt[:pid])
      FileUtils.mkdir_p(dir) unless File.exist?(dir)
    }
    parser.on('-l LOG', '--log <logfile>', 'Log file (only for the daemon mode)') { |v|
      if Pathname.new(v).absolute?
        opt[:log] = Pathname.new(v).to_s
      else
        opt[:log] = Pathname.new(File.join(Pathname.pwd, v)).to_s
      end
      dir = File.dirname(opt[:log])
      FileUtils.mkdir_p(dir) unless File.exist?(dir)
    }
    parser.on('-c CNF', '--conf <configfile>', 'Config file') { |v|
      if Pathname.new(v).absolute?
        opt[:conf] = Pathname.new(v).to_s
      else
        opt[:conf] = Pathname.new(File.join(Pathname.pwd, v)).to_s
      end
    }
    parser.on('-e ENV', '--env <environment>', 'Execution environment') { |v|
      opt[:env] = v
    }

  when :stop
    parser.on('-v', '--verbose', 'verbose') { |v|
      opt[:verbose] = true
    }
    parser.on('-f', '--force', 'force shutdown') { |v|
      opt[:force] = true
    }
    parser.on('-p PID', '--pid <pidfile>', 'PID file') { |v|
      if Pathname.new(v).absolute?
        opt[:pid] = Pathname.new(v).to_s
      else
        opt[:pid] = Pathname.new(File.join(Pathname.pwd, v)).to_s
      end
    }

  when :setup
    parser.on('-v', '--verbose', 'verbose') { |v|
      opt[:verbose] = true
    }
    parser.on('-f', '--force', 'Override config file') { |v|
      opt[:force] = true
    }
    parser.on('-c CNF', '--conf <configfile>', 'Config file') { |v|
      if Pathname.new(v).absolute?
        opt[:conf] = Pathname.new(v).to_s
      else
        opt[:conf] = Pathname.new(File.join(Pathname.pwd, v)).to_s
      end
    }

  end

}

begin
  parser.parse!(ARGV)
rescue
  puts parser.help
  exit 1
end

Castoro::Manipulator::ScriptRunner.send(command, opt)

